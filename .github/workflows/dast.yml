name: DAST

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch: {}

permissions:
  contents: read

env:
  TARGET_URL: ${{ secrets.TARGET_URL }}
  OPENAPI_URL: ${{ secrets.OPENAPI_URL }}
  DD_URL: ${{ secrets.DD_URL }}
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  DD_ENGAGEMENT_ID: ${{ secrets.DD_ENGAGEMENT_ID }}
  ZAP_AUTH_HEADER: ${{ secrets.ZAP_AUTH_HEADER }} # опционально

jobs:
  zap-baseline:
    name: ZAP Baseline (site)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run ZAP Baseline (passive)
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.TARGET_URL }}
          # генерируем XML для DefectDojo; -a = более агрессивные пассивные проверки
          cmd_options: >-
            -a
            -x zap_report.xml
          allow_issue_writing: false
          fail_action: false   # не валим пайплайн; результаты всё равно выгружаем

      - name: Upload to DefectDojo (reimport → import)
        if: ${{ env.DD_URL != '' && env.DD_API_KEY != '' && env.DD_ENGAGEMENT_ID != '' }}
        run: |
          set -e
          test -f zap_report.xml || { echo "ZAP report not found"; exit 0; }

          curl -sS -X POST "$DD_URL/api/v2/reimport-scan/" \
            -H "Authorization: Token $DD_API_KEY" \
            -F "engagement=$DD_ENGAGEMENT_ID" \
            -F "scan_type=ZAP Scan" \
            -F "file=@zap_report.xml" \
            -F "test_title=ZAP Baseline" \
            -F "build_id=$GITHUB_RUN_NUMBER" \
            -F "commit_hash=$GITHUB_SHA" \
            -F "branch_tag=$GITHUB_REF_NAME" \
            -F "close_old_findings=True" \
          || curl -sS -X POST "$DD_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DD_API_KEY" \
            -F "engagement=$DD_ENGAGEMENT_ID" \
            -F "scan_type=ZAP Scan" \
            -F "file=@zap_report.xml" \
            -F "test_title=ZAP Baseline" \
            -F "build_id=$GITHUB_RUN_NUMBER" \
            -F "commit_hash=$GITHUB_SHA" \
            -F "branch_tag=$GITHUB_REF_NAME" \
            -F "active=True" -F "verified=False"

  zap-api:
    name: ZAP API Scan (OpenAPI)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run ZAP API Scan (OpenAPI)
        uses: zaproxy/action-api-scan@v0.7.0
        with:
          target: ${{ env.OPENAPI_URL }}
          format: openapi
          # генерируем XML для Dojo
          cmd_options: >-
            -a
            -x zap_report.xml
          allow_issue_writing: false
          fail_action: false

      - name: Upload to DefectDojo (reimport → import)
        if: ${{ env.DD_URL != '' && env.DD_API_KEY != '' && env.DD_ENGAGEMENT_ID != '' }}
        run: |
          set -e
          test -f zap_report.xml || { echo "ZAP report not found"; exit 0; }

          curl -sS -X POST "$DD_URL/api/v2/reimport-scan/" \
            -H "Authorization: Token $DD_API_KEY" \
            -F "engagement=$DD_ENGAGEMENT_ID" \
            -F "scan_type=ZAP Scan" \
            -F "file=@zap_report.xml" \
            -F "test_title=ZAP API Scan (OpenAPI)" \
            -F "build_id=$GITHUB_RUN_NUMBER" \
            -F "commit_hash=$GITHUB_SHA" \
            -F "branch_tag=$GITHUB_REF_NAME" \
            -F "close_old_findings=True" \
          || curl -sS -X POST "$DD_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DD_API_KEY" \
            -F "engagement=$DD_ENGAGEMENT_ID" \
            -F "scan_type=ZAP Scan" \
            -F "file=@zap_report.xml" \
            -F "test_title=ZAP API Scan (OpenAPI)" \
            -F "build_id=$GITHUB_RUN_NUMBER" \
            -F "commit_hash=$GITHUB_SHA" \
            -F "branch_tag=$GITHUB_REF_NAME" \
            -F "active=True" -F "verified=False"
